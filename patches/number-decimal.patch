diff --git a/src/Adapters/Storage/Mongo/MongoSchemaCollection.js b/src/Adapters/Storage/Mongo/MongoSchemaCollection.js
index 20e3eec3..73e53006 100644
--- a/src/Adapters/Storage/Mongo/MongoSchemaCollection.js
+++ b/src/Adapters/Storage/Mongo/MongoSchemaCollection.js
@@ -36,6 +36,8 @@ function mongoFieldToParseSchemaField(type) {
       return { type: 'Bytes' };
     case 'polygon':
       return { type: 'Polygon' };
+    case 'numberdecimal':
+      return { type: 'NumberDecimal' };
   }
 }
 
@@ -143,6 +145,8 @@ function parseFieldTypeToMongoFieldType({ type, targetClass }) {
       return 'bytes';
     case 'Polygon':
       return 'polygon';
+    case 'NumberDecimal':
+      return 'numberdecimal';
   }
 }
 
diff --git a/src/Adapters/Storage/Mongo/MongoTransform.js b/src/Adapters/Storage/Mongo/MongoTransform.js
index 91ad23fa..f0b6df7a 100644
--- a/src/Adapters/Storage/Mongo/MongoTransform.js
+++ b/src/Adapters/Storage/Mongo/MongoTransform.js
@@ -621,6 +621,9 @@ function transformTopLevelAtom(atom, field) {
       if (PolygonCoder.isValidJSON(atom)) {
         return PolygonCoder.JSONToDatabase(atom);
       }
+      if (NumberDecimalCoder.isValidJSON(atom)) {
+        return NumberDecimalCoder.JSONToDatabase(atom);
+      }
       if (FileCoder.isValidJSON(atom)) {
         return FileCoder.JSONToDatabase(atom);
       }
@@ -1048,6 +1051,10 @@ const nestedMongoObjectToNestedParseObject = mongoObject => {
         return mongoObject.value;
       }
 
+      if (mongoObject instanceof mongodb.Decimal128) {
+        return mongoObject.toString()
+      }
+
       if (BytesCoder.isValidDatabaseObject(mongoObject)) {
         return BytesCoder.databaseToJSON(mongoObject);
       }
@@ -1111,6 +1118,10 @@ const mongoObjectToParseObject = (className, mongoObject, schema) => {
         return mongoObject.value;
       }
 
+      if (mongoObject instanceof mongodb.Decimal128) {
+        return mongoObject.toString()
+      }
+
       if (BytesCoder.isValidDatabaseObject(mongoObject)) {
         return BytesCoder.databaseToJSON(mongoObject);
       }
@@ -1248,6 +1259,14 @@ const mongoObjectToParseObject = (className, mongoObject, schema) => {
                 restObject[key] = BytesCoder.databaseToJSON(value);
                 break;
               }
+              if (
+                schema.fields[key] &&
+                schema.fields[key].type === 'NumberDecimal' &&
+                NumberDecimalCoder.isValidDatabaseObject(value)
+              ) {
+                restObject[key] = NumberDecimalCoder.databaseToJSON(value);
+                break;
+              }
             }
             restObject[key] = nestedMongoObjectToNestedParseObject(mongoObject[key]);
         }
@@ -1403,6 +1422,27 @@ var PolygonCoder = {
   },
 };
 
+var NumberDecimalCoder = {
+  databaseToJSON(value) {
+    return {
+      __type: 'NumberDecimal',
+      value: value,
+    };
+  },
+
+  isValidDatabaseObject(object) {
+    return object instanceof mongodb.Decimal128
+  },
+
+  JSONToDatabase(json) {
+    return mongodb.Decimal128.fromString(json.value)
+  },
+
+  isValidJSON(value) {
+    return typeof value === 'object' && value !== null && value.__type === 'NumberDecimal';
+  },
+}
+
 var FileCoder = {
   databaseToJSON(object) {
     return {
diff --git a/src/Controllers/SchemaController.js b/src/Controllers/SchemaController.js
index 179de37b..63fdc489 100644
--- a/src/Controllers/SchemaController.js
+++ b/src/Controllers/SchemaController.js
@@ -1564,6 +1564,11 @@ function getObjectType(obj): ?(SchemaField | string) {
           return 'Polygon';
         }
         break;
+      case 'NumberDecimal':
+        if (obj.value) {
+          return 'NumberDecimal'
+        }
+        break;
     }
     throw new Parse.Error(Parse.Error.INCORRECT_TYPE, 'This is not a valid ' + obj.__type);
   }
