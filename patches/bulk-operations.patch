diff --git a/src/Adapters/Storage/Mongo/MongoStorageAdapter.js b/src/Adapters/Storage/Mongo/MongoStorageAdapter.js
index 93e23b91..12f202f8 100644
--- a/src/Adapters/Storage/Mongo/MongoStorageAdapter.js
+++ b/src/Adapters/Storage/Mongo/MongoStorageAdapter.js
@@ -1,6 +1,7 @@
 // @flow
 import MongoCollection from './MongoCollection';
 import MongoSchemaCollection from './MongoSchemaCollection';
+import { newObjectId } from '../../../cryptoUtils';
 import { StorageAdapter } from '../StorageAdapter';
 import type { SchemaType, QueryType, StorageClass, QueryOptions } from '../StorageAdapter';
 import { parse as parseUrl, format as formatUrl } from '../../../vendor/mongodbUrl';
@@ -653,6 +654,72 @@ export class MongoStorageAdapter implements StorageAdapter {
       .catch(err => this.handleError(err));
   }
 
+  bulkWrite(className: string, schema: SchemaType, writeOps: any[]) {
+    const date = new Date()
+    return this._adaptiveCollection(className).then(collection =>
+      collection._mongoCollection.bulkWrite(writeOps.map(({ update }) => {
+        const mongoUpdate = transformUpdate(className, update, schema);
+        if (!mongoUpdate.$set) mongoUpdate.$set = {}
+        const document = Object.assign({
+          _id: newObjectId(24),
+          _created_at : date,
+          _updated_at : date
+        }, mongoUpdate.$set)
+        return { insertOne : { document }}
+      }), {ordered: false})
+    );
+  }
+
+  bulkUpdate(className: string, schema: SchemaType, writeOps: any[]) {
+    const date = new Date()
+    return this._adaptiveCollection(className).then(collection =>
+      collection._mongoCollection.bulkWrite(writeOps.map(({ filter, update, ...rest }) => {
+        const mongoWhere = transformWhere(className, filter, schema);
+        const mongoUpdate = transformUpdate(className, update, schema);
+        if (!mongoUpdate.$setOnInsert) mongoUpdate.$setOnInsert = {}
+        if (!mongoUpdate.$set) mongoUpdate.$set = {}
+        mongoUpdate.$setOnInsert._created_at = date;
+        mongoUpdate.$setOnInsert._id = newObjectId(24);
+        mongoUpdate.$set._updated_at = date;
+        return { updateOne: Object.assign({}, rest, { filter: mongoWhere, update: mongoUpdate }) }
+      }), {ordered: false})
+    );
+  }
+
+  bulkUpdateMany(className: string, schema: SchemaType, writeOps: any[]) {
+    const date = new Date()
+    return this._adaptiveCollection(className).then(collection =>
+      collection._mongoCollection.bulkWrite(writeOps.map(({ filter, update, ...rest }) => {
+        const mongoWhere = transformWhere(className, filter, schema);
+        const mongoUpdate = transformUpdate(className, update, schema);
+        if (!mongoUpdate.$setOnInsert) mongoUpdate.$setOnInsert = {}
+        if (!mongoUpdate.$set) mongoUpdate.$set = {}
+        mongoUpdate.$setOnInsert._created_at = date;
+        mongoUpdate.$setOnInsert._id = newObjectId(24);
+        mongoUpdate.$set._updated_at = date;
+        return { updateMany: Object.assign({}, rest, { filter: mongoWhere, update: mongoUpdate }) }
+      }), {ordered: false})
+    );
+  }
+
+  bulkDelete(className: string, schema: SchemaType, writeOps: any[]) {
+    return this._adaptiveCollection(className).then(collection =>
+      collection._mongoCollection.bulkWrite(writeOps.map(({ filter, update, ...rest }) => {
+        const mongoWhere = transformWhere(className, filter, schema);
+        return { deleteOne: { filter: mongoWhere } }
+      }), {ordered: false})
+    );
+  }
+
+  bulkDeleteMany(className: string, schema: SchemaType, writeOps: any[]) {
+    return this._adaptiveCollection(className).then(collection =>
+      collection._mongoCollection.bulkWrite(writeOps.map(({ filter, update, ...rest }) => {
+        const mongoWhere = transformWhere(className, filter, schema);
+        return { deleteMany: { filter: mongoWhere } }
+      }), {ordered: false})
+    );
+  }
+
   ensureIndex(
     className: string,
     schema: SchemaType,
diff --git a/src/Controllers/DatabaseController.js b/src/Controllers/DatabaseController.js
index 8e99b292..f77afd50 100644
--- a/src/Controllers/DatabaseController.js
+++ b/src/Controllers/DatabaseController.js
@@ -461,6 +461,71 @@ class DatabaseController {
       });
   }
 
+  bulkWrite(className: string, writeOps: any) {
+    if (!writeOps[0]) return Promise.resolve([]);
+    return this.validateClassName(className)
+      .then(() => this.validateObject(className, writeOps[0].update, {}, {}))
+      .then(validSchemaController => this.loadSchemaIfNeeded(validSchemaController))
+      .then(schemaController => {
+        return Promise.resolve()
+          .then(() => schemaController.enforceClassExists(className))
+          .then(() => schemaController.getOneSchema(className, true))
+          .then(schema => this.adapter.bulkWrite(className, schema, writeOps));
+      });
+  }
+
+  bulkUpdate(className: string, writeOps: any) {
+    if (!writeOps[0]) return Promise.resolve([]);
+    return this.validateClassName(className)
+      .then(() => this.validateObject(className, writeOps[0].update, {}, {}))
+      .then(validSchemaController => this.loadSchemaIfNeeded(validSchemaController))
+      .then(schemaController => {
+        return Promise.resolve()
+          .then(() => schemaController.enforceClassExists(className))
+          .then(() => schemaController.getOneSchema(className, true))
+          .then(schema => this.adapter.bulkUpdate(className, schema, writeOps));
+      });
+  }
+
+  bulkUpdateMany(className: string, writeOps: any) {
+    if (!writeOps[0]) return Promise.resolve([]);
+    return this.validateClassName(className)
+      .then(() => this.validateObject(className, writeOps[0].update, {}, {}))
+      .then(validSchemaController => this.loadSchemaIfNeeded(validSchemaController))
+      .then(schemaController => {
+        return Promise.resolve()
+          .then(() => schemaController.enforceClassExists(className))
+          .then(() => schemaController.getOneSchema(className, true))
+          .then(schema => this.adapter.bulkUpdateMany(className, schema, writeOps));
+      });
+  }
+
+  bulkDelete(className: string, writeOps: any) {
+    if (!writeOps[0]) return Promise.resolve([]);
+    return this.validateClassName(className)
+      .then(() => this.validateObject(className, {}, {}, {}))
+      .then(validSchemaController => this.loadSchemaIfNeeded(validSchemaController))
+      .then(schemaController => {
+        return Promise.resolve()
+          .then(() => schemaController.enforceClassExists(className))
+          .then(() => schemaController.getOneSchema(className, true))
+          .then(schema => this.adapter.bulkDelete(className, schema, writeOps));
+      });
+  }
+
+  bulkDeleteMany(className: string, writeOps: any) {
+    if (!writeOps[0]) return Promise.resolve([]);
+    return this.validateClassName(className)
+      .then(() => this.validateObject(className, {}, {}, {}))
+      .then(validSchemaController => this.loadSchemaIfNeeded(validSchemaController))
+      .then(schemaController => {
+        return Promise.resolve()
+          .then(() => schemaController.enforceClassExists(className))
+          .then(() => schemaController.getOneSchema(className, true))
+          .then(schema => this.adapter.bulkDeleteMany(className, schema, writeOps));
+      });
+  }
+
   update(
     className: string,
     query: any,
